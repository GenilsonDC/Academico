{"ast":null,"code":"import toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n  var dateStrings = splitDateString(argument);\n  var date;\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate(), dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    result.setFullYear(dirtyDate.getUTCFullYear());\n    return result;\n  }\n  return new Date(timestamp + time + offset);\n}\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString;\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n  return dateStrings;\n}\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","map":{"version":3,"names":["toInteger","requiredArgs","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","DEFAULT_ADDITIONAL_DIGITS","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","argument","dirtyOptions","arguments","options","additionalDigits","RangeError","Object","prototype","toString","call","Date","NaN","dateStrings","splitDateString","date","parseYearResult","parseYear","parseDate","restDateString","year","isNaN","timestamp","getTime","time","offset","parseTime","parseTimezone","dirtyDate","result","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","setFullYear","dateString","array","split","timeString","test","substr","length","token","exec","replace","regex","RegExp","captures","match","parseInt","century","slice","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","setUTCFullYear","Math","max","value","hours","parseTimeUnit","minutes","seconds","validateTime","parseFloat","timezoneString","sign","validateTimezone","isoWeekYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","daysInMonths","isLeapYearIndex","_year","_hours"],"sources":["/Users/genilsondocarmosilva/Git/Academico/Udemy/ReactMongo/web/node_modules/date-fns/esm/parseISO/index.js"],"sourcesContent":["import toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate(), dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    result.setFullYear(dirtyDate.getUTCFullYear());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString;\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}