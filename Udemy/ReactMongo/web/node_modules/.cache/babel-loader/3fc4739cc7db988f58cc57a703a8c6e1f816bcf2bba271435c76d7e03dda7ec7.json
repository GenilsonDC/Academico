{"ast":null,"code":"var MILLISECONDS_IN_MINUTE = 60000;\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","map":{"version":3,"names":["MILLISECONDS_IN_MINUTE","getDateMillisecondsPart","date","getTime","getTimezoneOffsetInMilliseconds","dirtyDate","Date","baseTimezoneOffset","Math","ceil","getTimezoneOffset","setSeconds","hasNegativeUTCOffset","millisecondsPartOfTimezoneOffset"],"sources":["/Users/genilsondocarmosilva/Git/Academico/Udemy/ReactMongo/web/node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js"],"sourcesContent":["var MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}"],"mappings":"AAAA,IAAIA,sBAAsB,GAAG,KAAK;AAElC,SAASC,uBAAuBA,CAACC,IAAI,EAAE;EACrC,OAAOA,IAAI,CAACC,OAAO,CAAC,CAAC,GAAGH,sBAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASI,+BAA+BA,CAACC,SAAS,EAAE;EACjE,IAAIH,IAAI,GAAG,IAAII,IAAI,CAACD,SAAS,CAACF,OAAO,CAAC,CAAC,CAAC;EACxC,IAAII,kBAAkB,GAAGC,IAAI,CAACC,IAAI,CAACP,IAAI,CAACQ,iBAAiB,CAAC,CAAC,CAAC;EAC5DR,IAAI,CAACS,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC;EACrB,IAAIC,oBAAoB,GAAGL,kBAAkB,GAAG,CAAC;EACjD,IAAIM,gCAAgC,GAAGD,oBAAoB,GAAG,CAACZ,sBAAsB,GAAGC,uBAAuB,CAACC,IAAI,CAAC,IAAIF,sBAAsB,GAAGC,uBAAuB,CAACC,IAAI,CAAC;EAC/K,OAAOK,kBAAkB,GAAGP,sBAAsB,GAAGa,gCAAgC;AACvF"},"metadata":{},"sourceType":"module","externalDependencies":[]}