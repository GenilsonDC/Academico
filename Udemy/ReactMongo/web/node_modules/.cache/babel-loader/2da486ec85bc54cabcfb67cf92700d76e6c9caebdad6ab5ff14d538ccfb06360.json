{"ast":null,"code":"import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (http://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with time zone, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n  var originalDate = toDate(dirtyDate);\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n  return result;\n}","map":{"version":3,"names":["toDate","isValid","addLeadingZeros","formatISO","dirtyDate","dirtyOptions","arguments","length","TypeError","concat","originalDate","RangeError","options","format","String","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","floor","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join"],"sources":["/Users/genilsondocarmosilva/Git/Academico/Udemy/ReactMongo/web/node_modules/date-fns/esm/formatISO/index.js"],"sourcesContent":["import toDate from '../toDate/index.js';\nimport isValid from '../isValid/index.js';\nimport addLeadingZeros from '../_lib/addLeadingZeros/index.js';\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (http://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with time zone, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}